---
title: "[Unilur](https://github.com/ginolhac/unilur) Example"
format: 
  unilur-question-html: default
  unilur-solution-html:
    output-file: solution.html
embed-resources: true
---

## Usage once extension installed

- **Activate** the extension by adding the following lines to your YAML header:

``` yaml
format:
  unilur-question-html: default
  unilur-solution-html:
    # You have to specify a different output file otherwise they will 
    # overwrite themselves
    output-file: solution.html 
```

- **Solution** code blocks are **highlighted** or ~~discarded~~ according to the chunk option `unilur-solution` Boolean and the global option `show-solution` in the YAML header.

Of note, if `show-solution` is absent, it is considered `false`.


### Example with `unilur-solution: true`

- Code chunk with `echo: fenced`

```{r}
#| unilur-solution: true
#| echo: fenced

1 + 1
```

- Code block _without_ solution, so stays in whatever happens

```{r}
#| echo: fenced

1 + 1
```

- Solution with `unilur-collapse: false` 

```{r}
#| unilur-solution: true
#| unilur-collapse: false

1 + 2
```

- Solution with markdown text (`{block}`):

````{block}
#| unilur-solution: true
#| unilur-collapse: false
For text with **bold** or warning people about CO~2~ atmospheric concentration

```{{r}}

1 + 1
```

````

Any machinery supported by Quarto can be used:

- Python Code chunk with `unilur-solution: true`

```{python}
#| unilur-solution: true
for i in [3, 5, 6]:
  print(i)
```

You can also include `div` labels:

````

::: unilur-solution

Here is a solution that is inside a div. The contents of this will only be shown
in the solution document.

:::

````

The advantage of working inside the div labels is that standard code formatting and
highlighting will apply, and code can be executed alongside standard text.